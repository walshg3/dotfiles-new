# External Programs
map E  edit
map dU shell -p du --max-depth=1 -h --apparent-size | sort -rh
map du shell -p du --max-depth=1 -h --apparent-size
map ec console compress compressed.tar.gz 
map ee shell nvim %f
map eg shell lazygit
map ex extract_here 

# Rename
map A  eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"))
map I  eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"), position=7)
map a  rename_append
map cW bulkrename %s
map cw console rename%space

# Paste
map p'<any> paste dest=%any_path
map pL paste_symlink relative=True
map pO paste overwrite=True append=True
map pP paste append=True
map p`<any> paste dest=%any_path
map pd console paste dest=
map phl paste_hardlink
map pht paste_hardlinked_subtree
map pi shell xclip-pastefile
map pl paste_symlink relative=False
map po paste overwrite=True
map pp paste
map pz extracthere
# map <space>p eval fm.open_console('shell cp "' + fm.thisfile.relative_path + '" "' + (('.' + fm.thisfile.extension) if fm.thisfile.extension else "") + '"', position=13+len(fm.thisfile.relative_path))

# Cut
map U uncut
map da cut mode=add
map dd cut
map di shell xclip-cutfile %s
map dr cut mode=remove
map dt cut mode=toggle
map ud uncut

# Yank
map y. yank name_without_extension
map yd yank dir
map yi shell xclip-copyfile %s
map yn yank name
map yp yank path

# Copy
map ya copy mode=add
map yi shell xclip-copyfile %s
map yr copy mode=remove
map ysy eval fm.open_console('shell sudo cp "' + fm.thisfile.relative_path + '" "' + (('.' + fm.thisfile.extension) if fm.thisfile.extension else "") + '"', position=13+len(fm.thisfile.relative_path))
map yt copy mode=toggle
map yy copy

# Temporary workarounds
map dG  eval fm.cut(dirarg=dict(to=-1), narg=quantifier)
map dgg eval fm.cut(dirarg=dict(to=0), narg=quantifier)
map dj  eval fm.cut(dirarg=dict(down=1), narg=quantifier)
map dk  eval fm.cut(dirarg=dict(up=1), narg=quantifier)
map yG  eval fm.copy(dirarg=dict(to=-1), narg=quantifier)
map ygg eval fm.copy(dirarg=dict(to=0), narg=quantifier)
map yj  eval fm.copy(dirarg=dict(down=1), narg=quantifier)
map yk  eval fm.copy(dirarg=dict(up=1), narg=quantifier)

# File operations
map D console delete
map ch console chmod%space
map dD console delete
map dT console trash
map ed console mkdir%space
map ef console touch%space

# Generate all the chmod bindings with some python help:
eval for arg in "rwxXst": cmd("map +u{0} shell -f chmod u+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +g{0} shell -f chmod g+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +o{0} shell -f chmod o+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +a{0} shell -f chmod a+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +{0}  shell -f chmod u+{0} %s".format(arg))

eval for arg in "rwxXst": cmd("map -u{0} shell -f chmod u-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -g{0} shell -f chmod g-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -o{0} shell -f chmod o-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -a{0} shell -f chmod a-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -{0}  shell -f chmod u-{0} %s".format(arg))
